Delete:
	stop:
		stop_desc
		stop_url
		parent_station
		stop_code
		zone_id
		location_type
		stop_code?
	stop_times:
		either arrival_time or departure_time
		stop_headsign
		pickup_type?
		drop_off_type?
		shape_dist_traveled
	trips:
		trip_short_name
		block_id
		wheelchair_accesible?
		bikes_allowed?
	routes:
		agency_id
		route_desc
		route_type
		route_url
		route_color
		route_text_color

Routing:
	Routing:
	1. Find closest stops to start and end (??? HOW ???)
		- Bus stops within a 1km square block of the location?
			Expand range if < x stops found
	2. Get routes that pass through those stops (in stop object)
	3. Find list of stops that those routes pass through (in route object)
	4. See if there is any overlap between the two lists
		YES: 	You have found a route - goto timing
		NO:	Go one level deeper (repeat 2 - 4 with the larger group of stops) 
	
	Timing:
	1. Start from end stop and get closest time before end time
	2. Proceed backwards along that route until you get to:
		START STOP:	Record timestamp of bus stop
		TRANSFER:	Record timestamp of bus arrival, then goto 1.
	3. Construct response and return
					
